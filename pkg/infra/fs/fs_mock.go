// Code generated by MockGen. DO NOT EDIT.
// Source: fs.go

package fs

import (
	gomock "github.com/golang/mock/gomock"
	afero "github.com/spf13/afero"
	os "os"
	reflect "reflect"
	time "time"
)

// MockFileSystem is a mock of FileSystem interface
type MockFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemMockRecorder
}

// MockFileSystemMockRecorder is the mock recorder for MockFileSystem
type MockFileSystemMockRecorder struct {
	mock *MockFileSystem
}

// NewMockFileSystem creates a new mock instance
func NewMockFileSystem(ctrl *gomock.Controller) *MockFileSystem {
	mock := &MockFileSystem{ctrl: ctrl}
	mock.recorder = &MockFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockFileSystem) EXPECT() *MockFileSystemMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockFileSystem) Create(name string) (afero.File, error) {
	ret := _m.ctrl.Call(_m, "Create", name)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockFileSystemMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockFileSystem)(nil).Create), arg0)
}

// Mkdir mocks base method
func (_m *MockFileSystem) Mkdir(name string, perm os.FileMode) error {
	ret := _m.ctrl.Call(_m, "Mkdir", name, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir
func (_mr *MockFileSystemMockRecorder) Mkdir(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Mkdir", reflect.TypeOf((*MockFileSystem)(nil).Mkdir), arg0, arg1)
}

// MkdirAll mocks base method
func (_m *MockFileSystem) MkdirAll(path string, perm os.FileMode) error {
	ret := _m.ctrl.Call(_m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll
func (_mr *MockFileSystemMockRecorder) MkdirAll(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MkdirAll", reflect.TypeOf((*MockFileSystem)(nil).MkdirAll), arg0, arg1)
}

// Open mocks base method
func (_m *MockFileSystem) Open(name string) (afero.File, error) {
	ret := _m.ctrl.Call(_m, "Open", name)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (_mr *MockFileSystemMockRecorder) Open(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Open", reflect.TypeOf((*MockFileSystem)(nil).Open), arg0)
}

// OpenFile mocks base method
func (_m *MockFileSystem) OpenFile(name string, flag int, perm os.FileMode) (afero.File, error) {
	ret := _m.ctrl.Call(_m, "OpenFile", name, flag, perm)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (_mr *MockFileSystemMockRecorder) OpenFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "OpenFile", reflect.TypeOf((*MockFileSystem)(nil).OpenFile), arg0, arg1, arg2)
}

// Remove mocks base method
func (_m *MockFileSystem) Remove(name string) error {
	ret := _m.ctrl.Call(_m, "Remove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (_mr *MockFileSystemMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Remove", reflect.TypeOf((*MockFileSystem)(nil).Remove), arg0)
}

// RemoveAll mocks base method
func (_m *MockFileSystem) RemoveAll(path string) error {
	ret := _m.ctrl.Call(_m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (_mr *MockFileSystemMockRecorder) RemoveAll(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RemoveAll", reflect.TypeOf((*MockFileSystem)(nil).RemoveAll), arg0)
}

// Rename mocks base method
func (_m *MockFileSystem) Rename(oldname string, newname string) error {
	ret := _m.ctrl.Call(_m, "Rename", oldname, newname)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename
func (_mr *MockFileSystemMockRecorder) Rename(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Rename", reflect.TypeOf((*MockFileSystem)(nil).Rename), arg0, arg1)
}

// Stat mocks base method
func (_m *MockFileSystem) Stat(name string) (os.FileInfo, error) {
	ret := _m.ctrl.Call(_m, "Stat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (_mr *MockFileSystemMockRecorder) Stat(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stat", reflect.TypeOf((*MockFileSystem)(nil).Stat), arg0)
}

// Name mocks base method
func (_m *MockFileSystem) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (_mr *MockFileSystemMockRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Name", reflect.TypeOf((*MockFileSystem)(nil).Name))
}

// Chmod mocks base method
func (_m *MockFileSystem) Chmod(name string, mode os.FileMode) error {
	ret := _m.ctrl.Call(_m, "Chmod", name, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chmod indicates an expected call of Chmod
func (_mr *MockFileSystemMockRecorder) Chmod(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Chmod", reflect.TypeOf((*MockFileSystem)(nil).Chmod), arg0, arg1)
}

// Chtimes mocks base method
func (_m *MockFileSystem) Chtimes(name string, atime time.Time, mtime time.Time) error {
	ret := _m.ctrl.Call(_m, "Chtimes", name, atime, mtime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chtimes indicates an expected call of Chtimes
func (_mr *MockFileSystemMockRecorder) Chtimes(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Chtimes", reflect.TypeOf((*MockFileSystem)(nil).Chtimes), arg0, arg1, arg2)
}

// ReadDir mocks base method
func (_m *MockFileSystem) ReadDir(dirname string) ([]os.FileInfo, error) {
	ret := _m.ctrl.Call(_m, "ReadDir", dirname)
	ret0, _ := ret[0].([]os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir
func (_mr *MockFileSystemMockRecorder) ReadDir(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadDir", reflect.TypeOf((*MockFileSystem)(nil).ReadDir), arg0)
}

// ReadFile mocks base method
func (_m *MockFileSystem) ReadFile(filename string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (_mr *MockFileSystemMockRecorder) ReadFile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReadFile", reflect.TypeOf((*MockFileSystem)(nil).ReadFile), arg0)
}

// WriteFile mocks base method
func (_m *MockFileSystem) WriteFile(filename string, data []byte, perm os.FileMode) error {
	ret := _m.ctrl.Call(_m, "WriteFile", filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (_mr *MockFileSystemMockRecorder) WriteFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "WriteFile", reflect.TypeOf((*MockFileSystem)(nil).WriteFile), arg0, arg1, arg2)
}

// TempFile mocks base method
func (_m *MockFileSystem) TempFile(dir string, prefix string) (afero.File, error) {
	ret := _m.ctrl.Call(_m, "TempFile", dir, prefix)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempFile indicates an expected call of TempFile
func (_mr *MockFileSystemMockRecorder) TempFile(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TempFile", reflect.TypeOf((*MockFileSystem)(nil).TempFile), arg0, arg1)
}

// TempDir mocks base method
func (_m *MockFileSystem) TempDir(dir string, prefix string) (string, error) {
	ret := _m.ctrl.Call(_m, "TempDir", dir, prefix)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TempDir indicates an expected call of TempDir
func (_mr *MockFileSystemMockRecorder) TempDir(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TempDir", reflect.TypeOf((*MockFileSystem)(nil).TempDir), arg0, arg1)
}

// LocateRoot mocks base method
func (_m *MockFileSystem) LocateRoot(baseDir string) (*RootInfo, bool) {
	ret := _m.ctrl.Call(_m, "LocateRoot", baseDir)
	ret0, _ := ret[0].(*RootInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LocateRoot indicates an expected call of LocateRoot
func (_mr *MockFileSystemMockRecorder) LocateRoot(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LocateRoot", reflect.TypeOf((*MockFileSystem)(nil).LocateRoot), arg0)
}
