// Code generated by MockGen. DO NOT EDIT.
// Source: docker.go

package docker

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDocker is a mock of Docker interface
type MockDocker struct {
	ctrl     *gomock.Controller
	recorder *MockDockerMockRecorder
}

// MockDockerMockRecorder is the mock recorder for MockDocker
type MockDockerMockRecorder struct {
	mock *MockDocker
}

// NewMockDocker creates a new mock instance
func NewMockDocker(ctrl *gomock.Controller) *MockDocker {
	mock := &MockDocker{ctrl: ctrl}
	mock.recorder = &MockDockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDocker) EXPECT() *MockDockerMockRecorder {
	return _m.recorder
}

// GetDockerComposeVersion mocks base method
func (_m *MockDocker) GetDockerComposeVersion() (string, error) {
	ret := _m.ctrl.Call(_m, "GetDockerComposeVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerComposeVersion indicates an expected call of GetDockerComposeVersion
func (_mr *MockDockerMockRecorder) GetDockerComposeVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetDockerComposeVersion", reflect.TypeOf((*MockDocker)(nil).GetDockerComposeVersion))
}

// NormalizeProjectName mocks base method
func (_m *MockDocker) NormalizeProjectName(str string) string {
	ret := _m.ctrl.Call(_m, "NormalizeProjectName", str)
	ret0, _ := ret[0].(string)
	return ret0
}

// NormalizeProjectName indicates an expected call of NormalizeProjectName
func (_mr *MockDockerMockRecorder) NormalizeProjectName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NormalizeProjectName", reflect.TypeOf((*MockDocker)(nil).NormalizeProjectName), arg0)
}

// FindContainer mocks base method
func (_m *MockDocker) FindContainer(projectName string, service string, num int) (string, error) {
	ret := _m.ctrl.Call(_m, "FindContainer", projectName, service, num)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindContainer indicates an expected call of FindContainer
func (_mr *MockDockerMockRecorder) FindContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindContainer", reflect.TypeOf((*MockDocker)(nil).FindContainer), arg0, arg1, arg2)
}

// Prepare mocks base method
func (_m *MockDocker) Prepare() error {
	ret := _m.ctrl.Call(_m, "Prepare")
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare
func (_mr *MockDockerMockRecorder) Prepare() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Prepare", reflect.TypeOf((*MockDocker)(nil).Prepare))
}

// Exec mocks base method
func (_m *MockDocker) Exec(cid string, envs []string, name string, args ...string) error {
	_s := []interface{}{cid, envs, name}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Exec", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (_mr *MockDockerMockRecorder) Exec(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Exec", reflect.TypeOf((*MockDocker)(nil).Exec), _s...)
}
